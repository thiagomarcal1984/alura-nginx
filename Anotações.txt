#Comando para buscar ajuda do nginx.
$ nginx -h 

Com esse help, é possível achar a pasta onde os arquivos de configuração
estão localizados. No container docker, o caminho é /etc/nginx.

Dentro de /etc/nginx há o arquivo nginx.conf. Alguns dos parâmetros que
estão no arquivo:
    * worker_connections (nível raiz): máximo de conexões que cada 
      worker process pode ter.
    * worker_processes (nível events): número de colaboradores. Geralmente
      coincide com o número de núcleos do processador.
    * listen (nível http/server): porta onde o servidor escuta.
    * server_name (nível http/server): nome do domínio do servidor. Em teste
      escrevemos o localhost mesmo.
    * root (nível http/server/location (caminho)): diretório onde estarão
      os arquivos para serem servidos.
    * error_page (nível http/server (números dos erros HTTP)): define a 
      página de erro correspondente aos códigos HTTP anotados.
    * index (nível http/server/location (caminho)): lista de arquivos que
      servirão de index para o caminho especificado.
    * include (nível http): caminho onde estarão os arquivos de configuração
      complementares.

Os arquivos de configuração incluídos pelo nginx.conf podem começar com o 
nível server. Veja o exepmlo do arquivo default.conf.


#Comando para enviar o sinal de recarregamento do nginx.
$ nginx -s reload

Sem esse comando, o nginx não vai reconhecer as alterações nos arquivos 
de configuração.


#Comando para testar a sintaxe do arquivo nginx.conf.
$ nginx -t

Definição de proxy: um servidor que filtra as requisições da rede local 
para a internet. Serve para bloquear redes sociais e sites de conteúdo 
adulto na rede local, por exemplo.

Definição de proxy reverso: um servidor que redireciona as requisições que 
recebe da internet para outros computadores da rede local. O proxy reverso 
pode fazer redirecionamento, balanceamento de carga, verificar cache etc.

O nível location dentro de server pode receber por parâmetro uma RegEx. Ela
é precedida de um til (~). Caso você queira que a RegEx seja case insensitive,
use til e asterisco (~*).

O comando proxy_pass (nível http/server/location) precisa de um endereço com 
o protocolo, senão nginx não entende. Ex.: 
server {
    location ~* \.php$ {
        proxy_pass http://php-server;
    }
}


É importante acrescentar a barra ao final do endereço fornecido no comando
proxy_pass. Senão, ao redirecionar a requisição para um serviço, o proxy 
reverso passa um caminho maior para o serviço que vai responder.


Os clientes podem ficar perdidos se forem acessar os vários serviços por
conta própria. Para solucionar esse problema, há o conceito de API Gateway.
O API Gateway funciona como Design pattern Fachada: concentra as referências
aos serviços, facilitando o seu acesso. A desvantagem é que o API Gateway
pode ser tanto uma entrada para soluções como para problemas.

API Gateways também podem servir como Decorators das requisições HTTP e como
um meio de limitar as requisições e respostas.

Há uma referência do nginx sobre como implementar um API Gateway:
https://www.nginx.com/blog/deploying-nginx-plus-as-an-api-gateway-part-1/


Upstream é um meio de agrupar servidores no nginx. Ao usar o comando 
proxy_pass, fornecemos o protocolo e o upstream contendo os servidores
que vão revezar entre si. 

Exemplo de configuração:
    upstream servicos {
        # server localhost:8000 weight 3;
        server localhost:8001;
        server localhost:8002;
    }

    server {
        listen 8003;
        server_name localhost;

        location / {
            proxy_pass http://servicos; 
        }
    }


É possível nomear os formatos de log com o comando log_format (grupo http)
e atribui-los a cada server com o comando access_log (grupo server). 